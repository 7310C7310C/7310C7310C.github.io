[{"title":"Python + Flask + uWSGI + Nginx 搭建淘宝商品搜索网站（五）","date":"2018-06-21T03:36:22.000Z","path":"2018/06/21/009-Python-+-Flask-+-uWSGI-+-Nginx-搭建淘宝商品搜索网站（五）/","text":"网址：www.wiken.app淘宝商品搜索网站搭建第五步：添加 https 支持（SSL 证书的申请） 阿里云 SSL 证书申请为了配置 https 支持，需要申请受浏览器信任的 SSL 证书，这里选择阿里云的 Symantec 免费版 SSL： 安装证书审核通过并签发后，下载证书到服务器本地，并配置 nginx.conf： server { listen 443; server_name localhost; ssl on; ssl_certificate cert/214801725980849.pem; ssl_certificate_key cert/214801725980849.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { include uwsgi_params; uwsgi_pass 127.0.0.1:8080; uwsgi_param UWSGI_PYHOME /root/py3/envPy3; uwsgi_param UWSGI_CHDIR /root/py3/; uwsgi_param UWSGI_SCRIPT manage:app; } } 重启 nginx 即可。考虑到某些特殊网络环境，故不将 http 强制跳转至 https，因此将两者共存。","tags":[{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"Python + Flask + uWSGI + Nginx 搭建淘宝商品搜索网站（四）","date":"2018-06-20T03:36:22.000Z","path":"2018/06/20/008-Python-+-Flask-+-uWSGI-+-Nginx-搭建淘宝商品搜索网站（四）/","text":"网址：www.wiken.app淘宝商品搜索网站搭建第四步：域名 DNS 解析 使用 DNSPod 解析添加域名（wiken.app）：添加 @ 和 www 记录， 记录类型均为 A，记录值为服务器 IP 地址： 到域名商设置 DNS 服务器地址：","tags":[{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"Python + Flask + uWSGI + Nginx 搭建淘宝商品搜索网站（三）","date":"2018-06-19T03:36:22.000Z","path":"2018/06/19/007-Python-+-Flask-+-uWSGI-+-Nginx-搭建淘宝商品搜索网站（三）/","text":"网址：www.wiken.app淘宝商品搜索网站搭建第三步：在 CentOS 上以 uWSGI + Nginx 部署 uWSGI 安装与配置uWSGI 安装：1pip install uwsgi uWSGI 配置（config.ini）：1234567[uwsgi]socket = 127.0.0.1:8080chdir = /root/py3/ #发布目录wsgi-file = manage.py #入口文件callable = app #应用名py-autoreload = 1stats = 127.0.0.1:9191 Nginx 安装与配置Nginx 安装： 参考 此文章 Nginx 配置（此时网站仅支持 http 访问）：123456789101112server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; include uwsgi_params; uwsgi_pass 127.0.0.1:8080; uwsgi_param UWSGI_PYHOME /root/py3/envPy3; uwsgi_param UWSGI_CHDIR /root/py3/; uwsgi_param UWSGI_SCRIPT manage:app; &#125;","tags":[{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"Python + Flask + uWSGI + Nginx 搭建淘宝商品搜索网站（二）","date":"2018-06-18T03:36:22.000Z","path":"2018/06/18/006-Python-+-Flask-+-uWSGI-+-Nginx-搭建淘宝商品搜索网站（二）/","text":"网址：www.wiken.app淘宝商品搜索网站搭建第二步：Web 前端设计 使用 Materialize 框架在 Materialize 官网下载并导入 HTML 中：12&lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.1.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"/static/js/materialize.min.js\"&gt;&lt;/script&gt; 导航条标题居中，两边放置导航链接：123456789101112131415&lt;nav class=\"orange darken-4\"&gt; &lt;div class=\"nav-wrapper\"&gt; &lt;a href=\"http://wiken.app\" class=\"brand-logo center waves-effect waves-light\"&gt;&lt;i class=\"material-icons\"&gt;shopping_cart&lt;/i&gt;轻淘宝&lt;/a&gt; &lt;ul id=\"nav-mobile\" class=\"left\"&gt; &lt;li&gt; &lt;a href=\"http://wiken.app\" class=\"waves-effect waves-light\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul id=\"nav-mobile\" class=\"right\"&gt; &lt;li&gt; &lt;a href=\"http://wiken.top\" target=\"_blank\" class=\"waves-effect waves-light\"&gt;博客&lt;/a&gt;&lt;/li&gt; &lt;li&gt; &lt;a href=\"https://github.com/7310C7310C\" target=\"_blank\" class=\"waves-effect waves-light\"&gt;GitHub&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/nav&gt; 搜索框搜索框及提交按钮放置于卡片组件中:123456789101112131415161718&lt;div class=\"row\"&gt; &lt;div class=\"col s12\"&gt; &lt;div class=\"card-panel indigo lighten-5 hoverable\"&gt; &lt;div class=\"row\"&gt; &lt;form class=\"col s12\" action=\"&#123;&#123; url_for('results') &#125;&#125;\" method=\"post\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"input-field col s12 m8 offset-m2 l6 offset-l3\"&gt; &lt;input id=\"keyword_orUrl\" type=\"text\" name=\"keyword_orUrl\" class=\"validate\"&gt; &lt;label for=\"keyword_orUrl\"&gt;请输入关键词&lt;/label&gt; &lt;button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\"&gt;搜索 &lt;i class=\"material-icons right\"&gt;search&lt;/i&gt;&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 商品卡片样式商品卡片左侧放置商品图片，右侧放置标题、商品价格等信息：1234567891011121314151617181920&lt;div class=\"col s12 m8 offset-m2 l6 offset-l3\"&gt; &lt;div class=\"card-panel grey lighten-5 z-depth-1 hoverable\"&gt; &lt;div class=\"row valign-wrapper\"&gt; &lt;div class=\"col s4\"&gt; &lt;a href=\"https:&#123;&#123; detail_url[i] &#125;&#125;\" target=\"_blank\"&gt; &lt;img src=\"https:&#123;&#123; pic_url[i] &#125;&#125;\" alt=\"\" class=\"responsive-img\"&gt;&lt;/a&gt;&lt;/div&gt; &lt;div class=\"col s8\"&gt; &lt;p class=\"black-text flow-text\"&gt; &lt;a href=\"https:&#123;&#123; detail_url[i] &#125;&#125;\" target=\"_blank\"&gt;&#123;&#123; title[i][0:30] &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p class=\"red-text flow-text\"&gt; &lt;span&gt;¥ &#123;&#123; price[i] &#125;&#125;&lt;/span&gt; &lt;span class=\"new badge blue\" data-badge-caption=\"\"&gt;&#123;&#123; sales[i] &#125;&#125;&lt;/span&gt;&lt;/p&gt; &lt;p class=\"black-text\"&gt; &lt;span&gt; &lt;a href=\"https:&#123;&#123; shopLink[i] &#125;&#125;\" target=\"_blank\"&gt;&#123;&#123; shop[i] &#125;&#125;&lt;/a&gt;&lt;/span&gt; &lt;span class=\"new badge teal\" data-badge-caption=\"\"&gt;&#123;&#123; location[i] &#125;&#125;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;","tags":[{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"Python + Flask + uWSGI + Nginx 搭建淘宝商品搜索网站（一）","date":"2018-06-17T03:36:22.000Z","path":"2018/06/17/005-Python-+-Flask-+-uWSGI-+-Nginx-搭建淘宝商品搜索网站（一）/","text":"网址：www.wiken.app淘宝商品搜索网站搭建第一步：程序逻辑的设计与编写 获取淘宝搜索结果网页源代码使用 requests 模块获取源代码：1234def getCode(url, headers): r = requests.get(url, headers=headers) r.encoding = 'utf-8' return r.text 判断表单数据是关键词还是链接后再获取源代码：123456789keyword_orUrl = request.form.get(\"keyword_orUrl\")if keyword_orUrl.startswith('https://'): splited = keyword_orUrl.split('&amp;s=') url = splited[0] + '&amp;s=' + str(int(splited[1])+44) code = getCode(url, headers)else: keyword = keyword_orUrl url = 'https://s.taobao.com/search?q=' + keyword + '&amp;cd=false&amp;s=0' code = getCode(url, headers) 提取商品信息使用 re 模块，用正则表达式提取商品标题、图片、价格等信息：123456789101112131415161718pic_url = re.findall(r'\"pic_url\":\"([^\"]+)\"', code, re.I)detail_url = re.findall(r'\"detail_url\":\"([^\"]+)\"', code, re.I)for i in range(len(detail_url)): if detail_url[i].startswith(\"https:\"): detail_url[i] = detail_url[i][6:] detail_url[i] = detail_url[i].encode('utf-8').decode('unicode_escape')shopLink = re.findall(r'\"shopLink\":\"([^\"]+)\"', code, re.I)for i in range(len(shopLink)): if shopLink[i].startswith(\"https:\"): shopLink[i] = shopLink[i][6:] shopLink[i] = shopLink[i].encode('utf-8').decode('unicode_escape') title = re.findall(r'\"raw_title\":\"([^\"]+)\"', code, re.I)price = re.findall(r'\"view_price\":\"([^\"]+)\"', code, re.I) sales = re.findall(r'\"view_sales\":\"([^\"]+)\"', code, re.I)shop = re.findall(r'\"nick\":\"([^\"]+)\"', code, re.I)location = re.findall(r'\"item_loc\":\"([^\"]+)\"', code, re.I) 异常处理如果出现 404、405、500 等请求错误，则跳转到首页:1234567891011@app.errorhandler(404)def error_404(error): return render_template('index.html'), 404 @app.errorhandler(405)def error_405(error): return render_template('index.html'), 405 @app.errorhandler(500)def error_500(error): return render_template('index.html'), 500","tags":[{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"使用 Materialize 框架设计旅游网站主页","date":"2018-01-21T03:36:22.000Z","path":"2018/01/21/010-使用-Materialize-框架设计旅游网站主页/","text":"网址：www.wiken.app/hh MaterializeMaterialize 是基于 Material Design 的主流前端响应式框架。话不多说，上网址：www.wiken.app/hh","tags":[{"name":"前端","slug":"前端","permalink":"http://wiken.top/tags/前端/"}]},{"title":"Codewars 之 A Rule of Divisibility by 13 解法","date":"2017-10-11T02:56:32.000Z","path":"2017/10/11/004-Codewars-之-A-Rule-of-Divisibility-by-13-解法/","text":"题目： When you divide the successive powers of 10 by 13 you get the following remainders of the integer divisions: 1, 10, 9, 12, 3, 4. Then the whole pattern repeats. Hence the following method: Multiply the right most digit of the number with the left most number in the sequence shown above, the second right most digit to the second left most digit of the number in the sequence. The cycle goes on and you sum all these products. Repeat this process until the sequence of sums is stationary. ………………………………………………………………… Example: What is the remainder when 1234567 is divided by 13? 7×1 + 6×10 + 5×9 + 4×12 + 3×3 + 2×4 + 1×1 = 178 We repeat the process with 178: 8x1 + 7x10 + 1x9 = 87 and again with 87: 7x1 + 8x10 = 87 ………………………………………………………………… From now on the sequence is stationary and the remainder of 1234567 by 13 is the same as the remainder of 87 by 13: 9 Call thirt the function which processes this sequence of operations on an integer n (&gt;=0). thirt will return the stationary number. thirt(1234567) calculates 178, then 87, then 87 and returns 87. thirt(321) calculates 48, 48 and returns 48 个人解答：123456789remainders = [1, 10, 9, 12, 3, 4]def thirt(n): sum = 0 for i, v in enumerate(reversed(str(n))): sum += int(v) * remainders[i % 6] if sum == n: return sum return thirt(sum) 网友（nhpatt, pompeu2004）最佳实践：1234567array = [1, 10, 9, 12, 3, 4]def thirt(n): total = sum([int(c) * array[i % 6] for i, c in enumerate(reversed(str(n)))]) if n == total: return total return thirt(total)","tags":[{"name":"Codewars","slug":"Codewars","permalink":"http://wiken.top/tags/Codewars/"},{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"Codewars 之 Multiples of 3 and 5 解法","date":"2017-04-13T10:48:25.000Z","path":"2017/04/13/003-Codewars-之-Multiples-of-3-and-5-解法/","text":"题目： If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Note: If the number is a multiple of both 3 and 5, only count it once. 个人解答：123456def solution(number): sum = 0 for i in range(number): if i%3==0 or i%5==0: sum = sum + i return sum 网友（Process 等）最佳实践：12def solution(number): return sum(x for x in range(number) if x % 3 == 0 or x % 5 == 0)","tags":[{"name":"Codewars","slug":"Codewars","permalink":"http://wiken.top/tags/Codewars/"},{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"Codewars 之 Unique In Order 解法","date":"2017-04-13T10:05:47.000Z","path":"2017/04/13/002-Codewars-之-Unique-In-Order-解法/","text":"题目： Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.For example:123unique_in_order('AAAABBBCCDAABBB') == ['A', 'B', 'C', 'D', 'A', 'B']unique_in_order('ABBCcAD') == ['A', 'B', 'C', 'c', 'A', 'D']unique_in_order([1,2,2,3,3]) == [1,2,3] 个人解答：12345678def unique_in_order(iterable): pre_item = None result = [] for item in iterable: if item != pre_item: result.append(item) pre_item = item return result 网友（kmeshu09 等）最佳实践：12345678def unique_in_order(iterable): result = [] prev = None for char in iterable[0:]: if char != prev: result.append(char) prev = char return result","tags":[{"name":"Codewars","slug":"Codewars","permalink":"http://wiken.top/tags/Codewars/"},{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"Codewars 之 Shortest Word 解法","date":"2017-04-13T09:51:00.000Z","path":"2017/04/13/001-Codewars-之-Shortest-Word-解法/","text":"题目： x Simple, given a string of words, return the length of the shortest word(s).String will never be empty and you do not need to account for different data types. 个人解答：1234567def find_short(s): word_list = s.split() len_list = [] for word in word_list: len_list.append(len(word)) l = min(len_list) return l 网友（MiraliN 等）最佳实践：12def find_short(s): return min(len(x) for x in s.split())","tags":[{"name":"Codewars","slug":"Codewars","permalink":"http://wiken.top/tags/Codewars/"},{"name":"Python","slug":"Python","permalink":"http://wiken.top/tags/Python/"}]},{"title":"你好!","date":"2017-04-02T02:26:12.000Z","path":"2017/04/02/hello-world/","text":"你好!","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wiken.top/tags/随笔/"}]}]